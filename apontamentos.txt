//Ao escrevermos um teste unitário para cobrir, por exemplo, um arquivo editorasController.js, o arquivo de teste deve ser especificado com o sufixo editorasController.test.js ou editorasController.spec.js, pois é uma convenção de mercado. Podemos ainda especificar o tipo de teste com nomeDoArquivo.unit.test.js e nomeDoArquivo.int.test.js para informar se o teste é unitário ou de integração. 

O arquivo de teste pode ficar no mesmo diretório do arquivo original:
├── src
│   ├── app.js
│   ├── controllers
│   │   └── editorasController.js
│   │   └── editorasController.test.js

Outra forma de especificar os testes no seu projeto é com a criação de um diretório específico com o nome tests ou __tests__ :(Mais utilizado e organizado)
├── src
│   ├── app.js
│   ├── controllers
│       └── editorasController.js
│
|
├── tests
    ├── editorasController.test.js      

Ou:
├── src
│   ├── app.js
│   ├── controllers
│       └── editorasController.js
│
|
├── __tests__
    ├── editorasController.test.js 

O Jest possibilita ainda que você separe os teste de unidade e testes de integração, podemos criar subpastas para ambos os testes com as nomenclaturas unit e int e configurar pelo próprio Jest para rodá-las com comandos diferentes, como sugestão: jest unit e jest int.

E qual a diferença entre usar tests e __tests__? O Jest encontrará da mesma forma os arquivos de teste que têm os prefixos de teste, porém, se você não utilizar estes prefixos no nome dos arquivos, nomear a pasta como __tests__ (com o sinal de subescrito duas vezes no começo e no fim) vai garantir que o Jest encontre os testes mesmo sem os sufixos. Por exemplo:

├── src
│   ├── app.js
│   ├── controllers
│       └── editorasController.js
│
|
├── __tests__
    ├── editorasControllerTest.js  

Ao executarmos o script de testes com a flag --coverage (cobertura), veremos uma tabela similar a esta:  
| File            | % Stmts | % Branch | % Funcs | % Lines | Uncovered Lines #s |
|-------------|---------|----------|---------|---------|-----------------|
| All files   | 100         | 100          | 100         | 100         |                     |
|        index.js | 100         | 100          | 100         | 100         |                     |

Test Suites:         1 passed, 1 total
Tests:         2 passed, 2 total
Snapshots:        0 total
Time:                 1.800 s
Ran all test suites.

File
A primeira coluna indica quais arquivos de teste do diretório estão sendo executados. Cada linha dessa coluna fornece as estatísticas para cada arquivo de teste localizado e executado pelo Jest.

Stmts
Esta coluna lista a porcentagem de statements do código que foram cobertos pelos testes. Em programação, um statement (ou declaração) é cada comando individual que damos ao programa para que ele execute instruções.

Branch
Sempre que o código de um programa apresenta ramificações no fluxo, por exemplo, blocos if…else ou switch, devemos garantir que todas as possibilidades sejam testadas. Ou seja, se existe um bloco if…else no programa, devemos escrever testes tanto para o código executado no bloco if quanto para o código executado no bloco else, e a porcentagem na coluna Branch mostra em quais arquivos há ramificações que precisam ter todas as suas condições testadas. Embora tenham o mesmo nome, não confundir estas branches com branches de versionamento do Git. O Jest não acessa o repositório do Git e nem há nenhum teste a ser feito nesse sentido.

Funcs
Informa qual a porcentagem de funções presentes em cada arquivo que foram executadas/chamadas pelos testes.

Lines
A porcentagem de linhas de código por onde os testes passaram durante a sua execução. Quando está em 100%, significa que os testes percorreram todas as linhas de código dos arquivos testados. Quando não está em 100%, devemos observar a coluna seguinte (Uncovered Lines), que vai indicar por quais linhas o Jest não passou ao executar os testes nos arquivos.

Uncovered lines
Lista quais linhas de cada arquivo não foram percorridas pelo Jest. Você pode usar esta lista para consultar o código e pensar em quais testes podem ser adicionados para que estas linhas também sejam “cobertas”.

O Jest também fornece o relatório de cobertura de forma mais visual. Quando utilizamos a flag coverage, além de exibir o relatório no terminal, o Jest também cria a pasta coverage na raiz do projeto. Dentro desta pasta, você pode acessar a subpasta lcov-report para ver o relatório (report) e interagir com os arquivos, abrindo o arquivo index.html e navegando pelos arquivos.
